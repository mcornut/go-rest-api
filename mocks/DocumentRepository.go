// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/mcornut/go-rest-api/models"

import sql "database/sql"

// DocumentRepository is an autogenerated mock type for the DocumentRepository type
type DocumentRepository struct {
	mock.Mock
}

// CreateDocument provides a mock function with given fields: db, name, filePath, thumbPath
func (_m *DocumentRepository) CreateDocument(db *sql.DB, name string, filePath string, thumbPath string) (int, error) {
	ret := _m.Called(db, name, filePath, thumbPath)

	var r0 int
	if rf, ok := ret.Get(0).(func(*sql.DB, string, string, string) int); ok {
		r0 = rf(db, name, filePath, thumbPath)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.DB, string, string, string) error); ok {
		r1 = rf(db, name, filePath, thumbPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocuments provides a mock function with given fields: db, page, resultsPerPage
func (_m *DocumentRepository) GetDocuments(db *sql.DB, page int, resultsPerPage int) ([]*models.Document, error) {
	ret := _m.Called(db, page, resultsPerPage)

	var r0 []*models.Document
	if rf, ok := ret.Get(0).(func(*sql.DB, int, int) []*models.Document); ok {
		r0 = rf(db, page, resultsPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Document)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.DB, int, int) error); ok {
		r1 = rf(db, page, resultsPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
